(function($) {
    'use strict';

    var container = '#fw-wizard-container';
    var elementsContainer = '#fw-elements-container';

    function log() {
        'console' in window && console.log.apply(console, arguments);
    }

    function warn() {
        'console' in window && console.warn.apply(console, arguments);
    }

    /**
     * renderRadioHeader - renders the header for radio
     *
     * @param  radioHeader the radio header object
     */
    function renderRadioHeader(radioHeader) {
        var radioHeaderHtml = '<div class="fw-radio-option-element" data-type="header"><label>Label</label>';
        radioHeaderHtml += '<input type="text" class="fw-radio-header" value="' + radioHeader + '"></input>'
        radioHeaderHtml += '</div>';
        return radioHeaderHtml;
    }


    /**
     * renderRadioOption - description
     *
     * @param  radioOption the radio option
     * @param  idx this options index
     * @return the html for the radio option
     */
    function renderRadioOption(radioOption, idx) {
        var radioOptionHtml = '<div class="fw-radio-option-element" data-type="option">'; //'<label>Option ' + idx + '</label>';
        radioOptionHtml += '<input type="text" class="fw-radio-option" placeholder="Option ' + idx + '" value="' + radioOption + '"></input>';
        radioOptionHtml += '<div class="fw-remove-radio-option"><i class="fa fa-minus-circle" aria-hidden="true"></i></div></div>';
        return radioOptionHtml;
    }


    function renderRadio(radio) {
        log('radio', radio);
        var i, n, optCount = 0;
        var radioHtml = '';
        var element;
        radioHtml += '<div class="fw-block-heading fw-block-hndle"><i class="fa fa-caret-down" aria-hidden="true"></i><h4>' + '&nbsp;' + wizard.i18n.radioHeading + '</h4></div>'
            // elements
        radioHtml += '<div class="fw-radio-option-container">';
        for (i = 0, n = radio.elements.length; i < n; i++) {
            element = radio.elements[i];
            log('element', element);
            if (element.type === 'option') {
                if (i == 1) {
                    radioHtml += '<label>Options</label>';
                }
                radioHtml += renderRadioOption(element.value, (1 + optCount++));
            } else {
                radioHtml += renderRadioHeader(element.value);
            }

        }
        radioHtml += '</div>';
        radioHtml += '<button class="fw-radio-add button-secondary"><i class="fa fa-plus" aria-hidden="true"></i> Add radio option</button><br/>';
        radioHtml += '<input type="checkbox" class="fw-required"'+ checkRequired(radio) + '/> choice required'

        return radioHtml;
    }

    function renderSubmit(block) {
        return '<div class="fw-block-heading fw-block-hndle"><h4>Form Submit</h4></div><p>Contains a field for name and email</p>';
    }

    function renderCheckbox(block) {
        log('checkbox', block);
        var textHtml;
        textHtml = '<div class="fw-block-heading fw-block-hndle"><h4>Checkbox</h4></div>';
        textHtml += '<p>This is a checkbox. Please specify a label below.</p>';
        textHtml += '<input type="text" class="fw-text-label" placeholder="Label" value="' + block.label + '"></input><br/>';
        textHtml += '<input type="checkbox" class="fw-required"'+ checkRequired(block) + '/> require checked'
        return textHtml;
    }

    function renderTextInput(block) {
        log('textInput', block);
        var textHtml;
        textHtml = '<div class="fw-block-heading fw-block-hndle"><h4>Text field </h4>';
        textHtml += '</div>'
        textHtml += '<p>This is a text field. Please specify a label below.</p>';
        textHtml += '<input type="text" class="fw-text-label" placeholder="Label" value="' + block.label + '"></input><br/>';
        textHtml += '<input type="checkbox" class="fw-required"'+ checkRequired(block) + '/> required'
        return textHtml;
    }

    function renderTextArea(block) {
        log('textArea', block);
        var textAreaHtml;
        textAreaHtml = '<div class="fw-block-heading fw-block-hndle"><h4>Text area</h4></div>';
        textAreaHtml += '<p>This is a text area. Please specify a label below.</p>';
        textAreaHtml += '<input type="text" class="fw-textarea-label" placeholder="Label" value="' + block.label + '"></input><br/>';
        textAreaHtml += '<input type="checkbox" class="fw-required"'+ checkRequired(block) + '/> required'
        return textAreaHtml;
    }

    function renderBlock(block) {
        log('block', block);
        var blockHtml = '<div class="fw-step-block" data-type="' + block.type + '" >';
        // removepart button
        blockHtml += '<div class="fw-remove-block">'
        blockHtml += '<i class="fa fa-times"></i>'
        blockHtml += '</div>'
        switch (block.type) {
            case 'radio':
                blockHtml += renderRadio(block);
                break;
            case 'checkbox':
                blockHtml += renderCheckbox(block);
                break;
            case 'text':
                blockHtml += renderTextInput(block);
                break;
            case 'textarea':
                blockHtml += renderTextArea(block);
                break;
            case 'submit':
                blockHtml += renderSubmit(block);
                break;
            default:
                break;
        }
        blockHtml += '</div>'
        return blockHtml;
    }

    function renderBlocks(blocks) {
        var blocksHtml = '';
        var i, n;
        for (i = 0, n = blocks.length; i < n; i++) {
            blocksHtml += renderBlock(blocks[i]);
        }
        return blocksHtml;
    }

    function renderPart(part, partClass) {
        log('part', part);
        var partHtml = '<div class="' + partClass + '">' + '<div class="inside">';


        // title
        partHtml += '<input type="text" class="fw-part-title" value="' + part.title + '" placeholder="' + wizard.i18n.partTitle + '"></input>'

        // removepart button
        partHtml += '<div class="fw-remove-part">'
        partHtml += '<i class="fa fa-times"></i>'
        partHtml += '</div>'

        // blocks
        partHtml += renderBlocks(part.blocks);

        // drag&drop or click here to add elements
        partHtml += '<div class="fw-add-element">'
        partHtml += '<a href="#TB_inline?width=400&height=200&inlineId=fw-thickbox-content" class="thickbox"><i class="fa fa-plus"></i><br> drag and drop elements here or click to add elements</a>'
        partHtml += '</div>'

        partHtml += '</div></div>'

        return partHtml;
    }

    function getPartClass(i, n) {
        var partClass = 'fw-step-part';
        // if (n > 1) {
        //     if (i == 0) {
        //         partClass += ' fw-left';
        //     } else {
        //         partClass += ' fw-right';
        //     }
        // }
        return partClass;
    }


    function renderParts(parts) {
        var i, n = parts.length,
            partsHtml = '<div><div class="fw-parts-header"><h3>Sections</h3></div>';
        partsHtml += '<div class="fw-column-buttons">';
        partsHtml += '<button type="button" class="fw-button-one-column"><i class="fa fa-align-justify"></i></button>';
        partsHtml += '<button type="button" class="fw-button-two-columns"><i class="fa fa-align-justify"></i> <i class="fa fa-align-justify"></i></button>';
        partsHtml += '</div>';
        var i, n;
        for (i = 0, n = parts.length; i < n; i++) {
            var partClass = getPartClass(i, n);
            partsHtml += renderPart(parts[i], partClass);
        }
        partsHtml += '<div class="fw-parts-footer">';
        partsHtml += '<a class="fw-add-part button-secondary"><i class="fa fa-plus"></i> Add Section</a>'
        partsHtml += '</div>'
        partsHtml += '</div>'
        return partsHtml;
    }

    function renderStepInside(step, idx) {
        var titleId = "fw-title-" + idx;
        var headlineId = "fw-headline-" + idx;
        var copyTextId = "fw-copy-text-" + idx;
        var stepHtml = '<div class="fw-step"><div class="form-wrap">';

        // title
        stepHtml += '<div class="input form-field">';
        stepHtml += '<input type="text" class="fw-step-title" value="' + step.title + '" placeholder="' + wizard.i18n.title + '"></input>'
        stepHtml += '</div>';

        // headline
        stepHtml += '<div class="input form-field">';
        stepHtml += '<label for="' + headlineId + '"><b>' + wizard.i18n.headline + '</b></label>';
        stepHtml += '<input type="text" class="fw-step-headline" value="' + step.headline + '"></input>'
        stepHtml += '</div>';

        // copy text
        stepHtml += '<div class="input form-field">';
        stepHtml += '<label for="' + copyTextId + '"><b>' + wizard.i18n.copyText + '</b></label>';
        stepHtml += '<input type="text" class="fw-step-copy_text" value="' + step.copy_text + '"></input>'
        stepHtml += '</div>';

        // parts
        stepHtml += '<div class="fw-step-parts">' + renderParts(step.parts) + '</div>';

        stepHtml += '</div><div class="fw-clearfix"></div></div>';
        return stepHtml;
    }

    function renderStep(step) {
        var stepHtml = '<div class="postbox">' +
            //'<div class="handlediv"><br /></div>' +
            '<div class="fw-movediv"><i class="fa fa-arrows"></i></div>' +
            '<div class="fw-trashdiv"><i class="fa fa-trash"></i></div>' +
            '<h1 class="hndle ui-sortable-handle"><span>' +
            '<i class="fa fa-caret-down" aria-hidden="true"></i> ' +
            step.title + '</span></h1>' + renderStepInside(step) +
            '<div class="fw-clearfix"></div>' +
            '</div>';
        return stepHtml;
    }

    function renderSteps(steps) {
        var i, n;
        var stepsHtml = '<div class="postbox-container"><div class="metabox-holder"><div class="meta-box-sortables">';
        for (i = 0, n = steps.length; i < n; i++) {
            stepsHtml += renderStep(steps[i], i);
        }
        stepsHtml += '</div></div></div>';
        $(container).html(stepsHtml);
    }


    /**
     * getRadioElementData - retrieve the data for a set of radio buttons
     *
     * @param $element the radio DOM element
     * @return an object with the radio header and options
     */
    function getRadioElementData($element) {
        var data = {};
        var type = data.type = $element.attr('data-type');
        if (type === 'option') {
            data.value = $element.find('.fw-radio-option').val();
        } else if (type === 'header') {
            data.value = $element.find('.fw-radio-header').val();
        }
        return data;
    }

    function getRadioData($radio, radio) {
        var elements = radio['elements'] = [];
        $radio.find('.fw-radio-option-element').each(function(idx, element) {
            elements.push(getRadioElementData($(element)));
        });
        radio['required'] = $radio.find('.fw-required').prop('checked');
    }


    // TODO: redundant functions

    function getCheckboxData($checkbox, checkbox) {
        checkbox['label'] = $checkbox.find('.fw-text-label').val();
        checkbox['required'] = $checkbox.find('.fw-required').prop('checked');
    }

    function getTextData($text, text) {
        text['label'] = $text.find('.fw-text-label').val();
        text['required'] = $text.find('.fw-required').prop('checked');
    }

    function getTextareaData($text, text) {
        text['label'] = $text.find('.fw-textarea-label').val();
        text['required'] = $text.find('.fw-required').prop('checked');
    }



    /**
     * getBlockData - get the data from backend input fields
     *
     * @param $block the block to get data from
     * @return the block data
     */
    function getBlockData($block) {
        var block = {};

        var type = block['type'] = $block.attr('data-type');
        switch (type) {
            case 'radio':
                getRadioData($block, block)
                break;
            case 'checkbox':
                getCheckboxData($block, block)
                break;
            case 'text':
                getTextData($block, block)
                break;
            case 'textarea':
                getTextareaData($block, block)
                break;
            case 'submit':
                break;
                // TODO add other elements here
        }

        return block;
    }

    function getPartData($part) {
        var part = {};
        part['title'] = $part.find('.fw-part-title').val();
        var blocks = part['blocks'] = [];
        $part.find('.fw-step-block').each(function(idx, element) {
            blocks.push(getBlockData($(element)));
        });
        return part;
    }

    function getStepData($step) {
        var step = {};
        step['title'] = $step.find('.fw-step-title').val();
        step['headline'] = $step.find('.fw-step-headline').val();
        step['copy_text'] = $step.find('.fw-step-copy_text').val();
        var parts = step['parts'] = [];
        $step.find('.fw-step-part').each(function(idx, element) {
            parts.push(getPartData($(element)))
        });

        return step;
    }

    // Event handlers

    function removeStep() {
        var $this = $(this);
        var $step = $this.closest('.postbox');
        // make step fade out and remove it
        $step.slideUp("slow", function() {
            $step.remove();
        });
    }

    function save() {
        var $container = $(container);
        var title  = $('.fw-wizard-title').val();
        var data = {
            title: title,
            wizard: {}
        };
        // data['title']
        data.wizard.steps = [];
        $container.find('.fw-step').each(
            function(idx, element) {
                data.wizard.steps.push(getStepData($(element)));
            }
        );

        log('save', data);
        log('ajaxurl', wizard.ajaxurl);
        log('nonce', wizard.nonce);

        $.ajax({
            type: 'POST',
            url: wizard.ajaxurl,
            dataType: 'json',
            data: {
                action: 'fw_wizard_save',
                data: data,
                nonce: wizard.nonce,
                id: wizard.id
            },
            success: function(response) {
                log('response', response);
                $('<div class="fw-save-success"><strong>' +
                        response.data.msg + '</strong></div>')
                    .hide().appendTo(".fw-actions")
                    .fadeIn(500)
                    .delay(3000)
                    .fadeOut('slow')
                    .fadeOut('slow');
            },
            error: function(response) {
                log('fail', arguments);
                log('response', response);
                //log('responseText', response.responseText);
            }
        });
    }


    /**
     * blockDrop - when a block is dropped this function is called
     *
     * @param  {type} event description
     * @param  {type} ui    description
     * @return {type}       description
     */
    function blockDrop(event, ui) {
        var $block, $part;
        var $this = $(this);
        var type = ui.draggable.attr('data-type');
        var rect = event.target.getBoundingClientRect();
        var middle = rect.right - rect.left;
        //log('rect', rect, middle, event.clientX);
        //log('ui', event, ui);
        log('blockDrop', event, ui);
        //log('draggable', ui.draggable);
        $block = $(renderBlock({
            type: type,
            elements: [{
                type: 'header',
                value: ''
            }, {
                type: 'option',
                value: ''
            }]
        }));
        var targetPart = event.target;
        var $parts = $(this).find('.fw-step-part');
        //log('drop parts', $parts);
        log('Target Part ', targetPart);
        $(targetPart).children(".fw-add-element").before($block[0].outerHTML);
        var len = $parts.length;
        if (!len || (len === 1 && event.clientX > middle)) {
            $part = $(renderPart({
                title: '',
                blocks: []
            }, 'fw-step-part'));
            $part.appendTo($this.find('.fw-step-parts > div'));
            $block.appendTo($part);
        } else if (event.clientX <= middle) {
            $part = $parts[0];
            $block.appendTo($part);
        } else {
            $part = $parts[1];
            $block.appendTo($part);
        }
        // remove hover effect
        $('event.target').removeClass('fw-over');
        setupDragNDrop();

        // add remove block event handler
        $('.fw-remove-block').click(function(event) {
            removeBlock(event);
        })
    }

    function blockOver(event, ui) {
        log('blockOver', event, ui);
        $(event.target.parent).addClass('fw-over');
        console.log("blockOver");
    }

    /**
     * blockOut - description
     *
     * @param  event the event
     * @param  ui the ui element
     */
    function blockOut(event, ui) {
        log('blockOut', event, ui);
        $(event.target).removeClass('fw-over');
    }

    /**
     * setupDragNDrop - prepare the draggables, sortables and droppables
     *
     * @return {helper}  some helpers for draggables
     */
    function setupDragNDrop() {
        $('.meta-box-sortables').sortable({
            opacity: 0.6,
            revert: true,
            cursor: 'move',
            handle: '.hndle',
            tolerance: 'pointer',
            update: function(event, ui) {
                warn('sortables update', event, ui);
                $(ui.item).removeAttr('style');
                setupDragNDrop();
            }
        });

        $('.fw-step-part .inside').sortable({
          opacity: 0.6,
          revert: true,
          cursor: 'move',
          handle: '.fw-block-hndle',
          tolerance: 'pointer',
          update: function(event, ui) {
              warn('block sortables update', event, ui);
              $(ui.item).removeAttr('style');
              setupDragNDrop();
          }
        });

        //        make step divs toggleable
        //        console.log(postboxes);
        //        postboxes.add_postbox_toggles('mondula-form-wizard');


        var stepScope = 'fw-wizard-elements-scope';
        var blockScope = 'fw-wizard-block-scope';
        // make elements draggable
        $(elementsContainer + ' .fw-draggable.fw-element-step').draggable({
            connectToSortable: '.meta-box-sortables',
            helper: function() {
                return renderStep({
                    title: '',
                    headline: '',
                    copy_text: '',
                    parts: []
                });
            },
            revert: 'invalid',
            scope: stepScope,
            cursor: 'move',
            zIndex: 100
        });

        $(elementsContainer + ' .fw-draggable-block').draggable({
            revert: 'invalid',
            helper: 'clone'
                /*function (event) {
                               var type = $(event.target).attr('data-type');
                               log('data', $(event.target).attr('data-type'));
                               log('helper', arguments);
                               switch (type) {
                                   case 'radio':
                                       return renderRadio({ header: '', group: '', opts: [] });

                           }*/
                ,
            scope: blockScope,
            cursor: 'move'
        });

        $(elementsContainer + ' .fw-draggable-radio-element').draggable({
            connectToSortable: '.fw-radio-option-container',
            helper: function() {
                var type = $(event.target).attr('data-type');
                log('data', type);
                switch (type) {
                    case 'option':
                        return renderRadioOption('', '');
                    case 'header':
                        return renderRadioHeader('');
                    default:
                        return '';
                }
            },
            revert: 'invalid'
        });

        $(elementsContainer + ' .fw-draggable-part').draggable({
            connectToSortable: '.fw-step-parts',
            helper: function() {
                return renderPart({
                    title: '',
                    blocks: []
                }, 'fw-step-part')
            },
            revert: 'invalid'
        });

        $(container + ' .postbox-container .inside').droppable({
            scope: blockScope,
            drop: blockDrop,
            over: blockOver,
            out: blockOut
        });

        $(container).find('.fw-step-title').on('change input', titleOnChange);
    }


    /**
     * setupTooltips - creates tooltips for better usability
     */
    function setupTooltips() {


    }


    /**
     * titleOnChange - ???
     *
     * @param  {type} evt description
     * @return {type}     description
     */
    function titleOnChange(evt) {
        var $this = $(this);

        log('titleOnChangeU', $this.val());

        $this.closest('.postbox').find('.hndle span').html($this.val());
    }


    /**
     * updateOptions - updates the radioOptions data-attribute after adding/removing
     *
     * @param  $container the radio container
     */
    function updateOptions($container) {
        $container.find('.fw-radio-option-element[data-type="option"] > label').each(
            function(idx, elt) {
                log('updateOptions', elt);
                $(elt).html('Option ' + (idx + 1));
            }
        )
    }


    /**
     * addStep - add a step to the wizard
     */
    function addStep() {
        var part = {
            title: '',
            blocks: []
        };
        var $step = $(renderStep({
            title: '',
            headline: '',
            copy_text: '',
            parts: [part]
        }));
        $step.appendTo($(container).find('.meta-box-sortables'));
        $step.hide();

        // event handlers for new step
        $step.find('.hndle').click(function(event) {
            console.log("toggle");
            $(this).next().slideToggle();
        });

        setupDragNDrop();
        setupThickbox();

        // scroll down to new step
        $("html, body").animate({
            scrollTop: $(document).height()
        }, 300, function() {
            $step.slideDown("normal");
        });

    }

    /**
     * checkRequired - description
     *
     * @param  block the block to check if it's required
     * @return the checked-attribure for html or nothing at all
     */
    function checkRequired(block) {
      if (block.required == 'true') {
        return 'checked';
      }
      return '';
    }

    /**
     * addPart - adds a part to a step
     *
     * @param  evt the addPart-Button in a step
     */
    function addPart(evt) {
        var target = evt.target;
        var $part = renderPart({
            title: '',
            blocks: []
        }, 'fw-step-part')
        $(target).closest('.fw-parts-footer').before($part);
        // setup handler for new part
        $('.fw-remove-part').click(function(event) {
            removePart(event);
        });
        setupThickbox();
    }


    /**
     * removePart - removes a part (section) from a step
     *
     * @param  evt the addPart-Button in a step
     */
    function removePart(evt) {
        var target = evt.target;
        log('removing part', $(target).closest('.fw-step-part'));
        $(target).closest('.fw-step-part').remove();
    }

    function removeBlock(evt) {
        var target = evt.target;
        log('removing block', $(target).closest('.fw-step-block'));
        $(target).closest('.fw-step-block').remove();
    }

    function setupThickbox() {
        $(".thickbox").click(function(thickEvent) {
            // RADIO BUTTONS
            $("#fw-thickbox-radio").unbind('click').click(function(thickRadioEvent) {
                tb_remove();
                var block = $(renderBlock({
                    type: 'radio',
                    elements: [{
                        type: 'header',
                        value: ''
                    }, {
                        type: 'option',
                        value: ''
                    }]
                }));
                $(thickEvent.target).closest(".fw-add-element").before(block);
                setupClickHandlers();
            });
            // CHECKBOX
            $("#fw-thickbox-checkbox").unbind('click').click(function(thickRadioEvent) {
              tb_remove();
              var block = $(renderBlock({
                  type: 'checkbox',
                  value: ''
              }));
              $(thickEvent.target).closest(".fw-add-element").before(block);
              setupClickHandlers();
            });

            // TEXT FIELD
            $("#fw-thickbox-text").unbind('click').click(function(thickRadioEvent) {
              tb_remove();
              var block = $(renderBlock({
                  type: 'text',
                  value: ''
              }));
              $(thickEvent.target).closest(".fw-add-element").before(block);
              setupClickHandlers();
            });
            // TEXT AREA
            $("#fw-thickbox-textarea").unbind('click').click(function(thickRadioEvent) {
              tb_remove();
              var block = $(renderBlock({
                  type: 'textarea',
                  value: ''
              }));
              $(thickEvent.target).closest(".fw-add-element").before(block);
              setupClickHandlers();
            });
            // SUBMIT
            $("#fw-thickbox-submit").unbind('click').click(function(thickRadioEvent) {
              tb_remove();
              var block = $(renderBlock({
                  type: 'submit',
                  value: ''
              }));
              $(thickEvent.target).closest(".fw-add-element").before(block);
              setupClickHandlers();
            });
        });
    }

    function setupClickHandlers(){
      // add step handler
      $('.fw-element-step').click(function(event) {
          addStep();
      });

      // add part handler
      $('.fw-add-part').click(function(event) {
          addPart(event);
          setupDragNDrop();
      });

      $('.hndle').click(function(event) {
          console.log("toggle");
          $(this).next().slideToggle();
      });

      // remove part handler
      $('.fw-remove-part').click(function(event) {
          removePart(event);
      })

      // remove block handler
      $('.fw-remove-block').click(function(event) {
          removeBlock(event);
      })

      $('.fw-button-one-column').click(function(event) {
          $(this).addClass("fw-pressed");
          $('.fw-button-two-columns').removeClass("fw-pressed");
      });

      $('.fw-button-two-columns').click(function(event) {
          $(this).addClass("fw-pressed");
          $('.fw-button-one-column').removeClass("fw-pressed");
      });

      $('.fw-radio-heading').click(function(event) {
          $(this).next().slideToggle();
          $(this).next().next().toggle();
          if ($("i", this).hasClass("left")) {
              $("i", this).removeClass("left");
          } else {
              $("i", this).addClass("rotate left");
          }

      });
    }


    /**
     * run - this function sets everything up
     */
    function run() {
        try {
            var w = JSON.parse(wizard.json);
            var $container = $(container);
            log(wizard);
            log(w);
            // load the wizard title
            $('.fw-wizard-title').val(w.title);
            
            renderSteps(w.wizard.steps);

            $('.fw-button-save').click(save);

            // make elements sticky
            $(window).scroll(function() {
                var offset = $(container).offset().top;
                return function() {
                    var scrollTop = $(this).scrollTop();
                    if (scrollTop > offset) {
                        $(elementsContainer).addClass('fw-sticky');
                    } else {
                        $(elementsContainer).removeClass('fw-sticky');
                    }
                };
            }())

            // toggle postboxes
            $container.on('click', '.postbox .handlediv', function() {
                $(this).closest('.postbox').toggleClass('closed');
            });

            $container.on('click', '.fw-radio-add', function() {
                var $cnt = $(this).prev('.fw-radio-option-container');
                var idx = $cnt.children('.fw-radio-option-element').length;
                var opt = renderRadioOption('', idx);
                $(opt).appendTo($cnt);
                updateOptions($cnt);
            });

            $container.on('click', '.fw-remove-radio-option', function() {
                log('remove on click');
                var $this = $(this);
                var $container = $this.closest('.fw-radio-option-container');
                $this.closest('.fw-radio-option-element').remove();
                updateOptions($container);
            });

            $container.on('click', '.fw-trashdiv', removeStep);

            $(".fw-remove-part").tooltip({
                content: "Remove this section"
            });

            setupDragNDrop();
            setupTooltips();
            setupThickbox();
            setupClickHandlers();

            // modal
            $('#fw-elements-modal').dialog({
                dialogClass: 'wp-dialog',
                modal: true,
                autoOpen: false,
                closeOnEscape: true,
                buttons: {
                    'Close': function() {
                        $(this).dialog('close');
                    }
                }
            });

        } catch (ex) {
            warn(ex);
        }
    }

    $(document).ready(run);
})(jQuery);
